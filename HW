import json
from pathlib import Path
import math
from functools import reduce

def mapper(path):
    if path.is_file() and path.suffix == '.json':
        with open(path, 'r') as f:
            info = json.load(f)
        score = float(info['movieIMDbRating'])
        return (score, 1)

def reducer(score_data1, score_data2):
    if score_data1 is None:
        return score_data2
    elif score_data2 is None:
        return score_data1

    sum1, count1 = score_data1
    sum2, count2 = score_data2

    total_sum = sum1 + sum2
    total_count = count1 + count2

    return (total_sum, total_count)

# map и reduce для расчета суммы и кол-ва оценок
scores_data = reduce(reducer, map(mapper, Path('imdb-user-reviews').glob('**/*.json')))

sum_scores, total_count = scores_data

# среднее значение
mean = sum_scores / total_count

# стандартное отклонение
sum_squares = reduce(lambda x, y: x + (y[0] - mean) ** 2, map(mapper, Path('imdb-user-reviews').glob('**/*.json')), 0)
std_dev = math.sqrt(sum_squares / total_count)

print(mean, std_dev)
  "nbformat_minor": 0
}

def mapper(path):
    if path.is_file() and path.suffix == '.json':
        with open(path, 'r') as f:
            info = json.load(f)
        return (float(info['movieIMDbRating']), )

def reducer(score_data1, score_data2):
    if score_data1 is None and score_data2 is None:
        return None
    elif score_data1 is None:
        return score_data2
    elif score_data2 is None:
        return score_data1
    else:
        scores = []
        if len(score_data1) == 1:
            n, mean, M2 = 0, 0.0, 0
            scores.append(score_data1[0])
        else:
            n, mean, M2 = score_data1
        scores.append(score_data2[0])
        for score in scores:
            n += 1
            delta = score - mean
            mean += delta / n
            M2 += delta * (score - mean)
        return n, mean, M2
%%time
n, mean, M2 = reduce(reducer, map(mapper, Path('imdb-user-reviews').glob('**/*')))
print(mean, (M2 / n) ** (1/2))
